!> author: Andres Perez Hortal
!  date: 23/08/2021
!  Module where all the model state variables are declared.
!  THIS CODE IS AUTOMATICALLY GENERATED.
!  DO NOT MODIFY IT DIRECTLY.

module model_state
    use types, only: p

    implicit none

    private

    public ModelState_Ptr_t

    {% for module, mod_vars in modules_vars.items() %}
    public {{mod_vars[0].derived_dtype_t}}, {{mod_vars[0].derived_dtype}}_allocate, {{mod_vars[0].derived_dtype}}_deallocate
    {% for var in mod_vars if var.time_dim %}
    public {{var.derived_dtype}}_allocate_{{var.name}}
    {% endfor %}
    {% endfor %}

    {# Define all the model variables #}

    {% for module, mod_vars in modules_vars.items() %}
    !> {{module}} module variables
    type {{mod_vars[0].derived_dtype_t}}

        {% for mod_def in nested_structs[module] %}
        type({{ mod_def.derived_dtype_t }}), allocatable :: {{ mod_def.module_var_name }} !! {{mod_def.module}} module variables
        {% endfor %}

        logical :: initialized = .false.

        {% for var in mod_vars %}
        {% if var.dimension is not none %}
        {{ var.dtype }}, allocatable, {{ var.dimension }}  :: {{ var.name }} ! {{ var.desc }}
        logical :: {{var.name}}_initialized = .false.
        {% else %}
        {{ var.dtype }} :: {{ var.name }} ! {{ var.desc }}
        {% endif %}

        {% endfor %}
    end type

    {% endfor %}

    type ModelState_Ptr_t
        type(ModelState_t), pointer :: p => NULL()
    end type

contains

    {% for module, mod_vars in modules_vars.items() %}
    !> Allocate {{module}} module variables
    subroutine {{mod_vars[0].derived_dtype}}_allocate({{mod_vars[0].module_var_name}})
        use params, only: mx, nx, kx, ntr, ix, il, iy, t_levs, aux_dim
        type({{mod_vars[0].derived_dtype_t}}), intent(out) :: {{mod_vars[0].module_var_name}}

        !==================================
        ! Allocate nested modules variables
        {% for mod_def in nested_structs[module] %}
        allocate( {{mod_vars[0].module_var_name}}%{{mod_def.module_var_name}})
        call {{mod_def.derived_dtype}}_allocate({{mod_vars[0].module_var_name}}%{{mod_def.module_var_name}})
        {% endfor %}

        !========================================================
        ! Allocate variables
        {% for var in mod_vars if var.dimension is not none %}
        {% if not var.time_dim %}
        allocate( {{var.module_var_name}}%{{var.name}}{{var.dims}} ) ! {{ var.desc }}
        {{var.module_var_name}}%{{var.name}}_initialized = .true.
        {{var.module_var_name}}%{{var.name}}=0
        {% endif %}

        {% endfor %}
        {% for var in mod_vars if var.time_dim is not none %}
        ! IMPORTANT: {{var.name}} is not initialized here
        {% endfor %}

    end subroutine
    
    {% for var in mod_vars if var.time_dim %}
    !> Allocate {{var.name}}
    subroutine {{var.derived_dtype}}_allocate_{{var.name}}({{var.module_var_name}}, {{var.time_dim}})
        use params, only: mx, nx, kx, ntr, ix, il, iy, t_levs, aux_dim
        type({{var.derived_dtype_t}}), intent(inout) :: {{var.module_var_name}}
        integer, intent(in) :: {{var.time_dim}}

        !=========================================
        ! Allocate {{var.name}}(lon, lat, {{var.time_dim}})
        allocate( {{var.module_var_name}}%{{var.name}}{{var.dims}} ) ! {{ var.desc }}
        {{var.module_var_name}}%{{var.name}} = 0
        {{var.module_var_name}}%{{var.name}}_initialized = .true.
    end subroutine

    {% endfor %}

    !> Deallocate {module}} module variables
    subroutine {{mod_vars[0].derived_dtype}}_deallocate({{mod_vars[0].module_var_name}})
        type({{mod_vars[0].derived_dtype_t}}), intent(inout) :: {{mod_vars[0].module_var_name}}

        !========================================================
        ! Safely {module}} module variables
        {% for var in mod_vars if var.dimension is not none %}
        ! {{ var.desc }}
        if( allocated({{var.module_var_name}}%{{var.name}}) ) deallocate( {{var.module_var_name}}%{{var.name}} )
        {{var.module_var_name}}%{{var.name}}_initialized = .false.
        {{var.module_var_name}}%initialized = .false.

        {% endfor %}

        !==================================
        ! Deallocate nested modules variables
        {% for mod_def in nested_structs[module] %}
        if( allocated({{mod_vars[0].module_var_name}}%{{mod_def.module_var_name}}) ) then
            call {{mod_def.derived_dtype}}_deallocate({{mod_vars[0].module_var_name}}%{{mod_def.module_var_name}})
            deallocate( {{mod_vars[0].module_var_name}}%{{mod_def.module_var_name}})
        endif
        {% endfor %}

    end subroutine

    {% endfor %}
end module